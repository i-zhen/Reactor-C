# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= includes vardecls (procedure)* main EOF
includes   ::= ("#include" STRING_LITERAL)*
stmtlist   ::= (stmt)*
main       ::= "void" "main" "(" ")" body
procedure  ::= type IDENT "(" params ")" body
type       ::= "int" | "char" | "void"
params     ::= [ typeident ("," typeident)* ]
body       ::= "{" vardecls stmtlist "}"
typeident  ::= type IDENT
exp        ::= lexp ">" lexp
             | lexp "<" lexp
             | lexp ">=" lexp
             | lexp "<=" lexp
             | lexp "!=" lexp
             | lexp "==" lexp
             | lexp
vardecls   ::= (typeident ";")*
stmt       ::= "{" vardecls stmtlist "}"
             | "while" "(" exp ")" stmt
             | "if" "(" exp ")" stmt ["else" stmt]
             | IDENT "=" lexp ";"
             | "return" [lexp] ";"
             | "print_s" "(" STRING_LITERAL ")" ";"
             | "print_c" "(" lexp ")" ";"
	     | "print_i" "(" lexp ")" ";"
             | funcall ";"	    
	     | "read_c" "(" ")" ";"
   	     | "read_i" "(" ")" ";"
lexp       ::= term (("+"|"-") term)*
term       ::= factor (("/"|"*"|"%") factor)*
factor     ::= "(" lexp ")"
             | ["-"] (IDENT|NUMBER)
             | CHARACTER
             | funcall
	     | "read_c" "(" ")"
	     | "read_i" "(" ")"
funcall    ::= IDENT "(" [ IDENT ("," IDENT)* ] ")"